#!/usr/bin/env bash
#
# This script can be used to wrap any pre run logic
#
script_path="$(dirname "$(realpath "$0")")"

function realpath() {
    local real
    local link

    cd "$(dirname "$1")"
    link=$(readlink "$(basename "$1")")
    while [ "$link" ]; do
        cd "$(dirname "$link")"
        link=$(readlink "$(basename "$1")")
    done

    real="$PWD/$(basename "$1")"
    cd "$PWD"
    echo "$real"
}

# ansible doesn't like empty paths, so we have to check before appending
if [ -n "$ANSIBLE_FILTER_PLUGINS" ]; then
    ANSIBLE_FILTER_PLUGINS="${ANSIBLE_FILTER_PLUGINS}:${script_path}/plugins/filters"
else
    ANSIBLE_FILTER_PLUGINS="${script_path}/plugins/filters"
fi

if [ -n "$ANSIBLE_LOOKUP_PLUGINS" ]; then
    ANSIBLE_LOOKUP_PLUGINS="${ANSIBLE_LOOKUP_PLUGINS}:${script_path}/plugins/lookup"
else
    ANSIBLE_LOOKUP_PLUGINS="${script_path}/plugins/lookup"
fi

export ANSIBLE_LOOKUP_PLUGINS
export ANSIBLE_FILTER_PLUGINS

if [ ! -f "${script_path}/src/ansible/__main__.py" ]; then
    echo "ERR ansible-portable: oops, looks like you have not installed the dependencies yet." >&2
    exit 1
fi

target="${script_path}/src/$(basename "$0")"

if [[ ! -h "$target" && ! -d "$target" ]]; then
    echo "ERR ansible-portable: ansible binary name $target does not exist or is invalid." >&2
    exit 1
fi

if command -v python3 &>/dev/null; then
    py=python3
elif command -v python &>/dev/null; then
    if [[ "$(python -c 'import sys;print(sys.version_info[0]);')" == "2" ]]; then
        echo "ERR ansible-portable: this version is not compatible with python 2.x" >&2
        exit 1
    fi
    py=python
else
    echo "ERR ansible-portable: no valid python 3.x installation was found." >&2
    exit 1
fi

"$py" "$target" $@

# show our version at the end if requested
if [[ "${1:-}" == "--version" && -f "${script_path}/RELEASE" ]]; then
    echo
    echo "ansible portable v$(head -1 "${script_path}/RELEASE") ($(tail -1 "${script_path}/RELEASE"))"
fi
